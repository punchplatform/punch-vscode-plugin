{"version":3,"file":"extension.js","mappings":"qIACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,eACA,QACA,SACA,QAEa,EAAAC,KAAO,CAAEC,SAAU,SAEhC,MAAMC,EAKFC,cACIC,KAAKC,WAAaC,EAAGC,WACrBC,QAAQC,IAAIL,KAAKC,YACjBD,KAAKM,GAAKC,EAAOC,UAAUC,iBAAiB,mBAA+B,WAC5D,IAAXT,KAAKM,IAA+B,SAAnBN,KAAKC,aACtBD,KAAKM,GAAK,WAEdN,KAAKU,UAAYH,EAAOC,UAAUC,iBAAiB,mBAAkC,cAC/D,IAAlBT,KAAKU,YACLV,KAAKU,UAAY,IAAKC,UAAY,8BAE1C,CAEAC,eAAeC,EAA+BC,GAC1C,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBjB,KAAKkB,OAAOL,EAAUC,GAAOK,MAAMC,GACxBJ,EAAQI,IACjB,GAGV,CAEAF,OAAOL,EAA+BC,GAElC,OADAd,KAAKqB,EAAE,KACA,IAAIN,SAAQ,CAACC,EAASC,KAEzB,IAAIK,EAAc,kBAAoBf,EAAOC,UAAUC,iBAAiB,mBAAgC,YAEpGc,EAAQ,iBAAmBT,EAAMS,MAAMC,KAAO,GAC9CC,EAAM,eAAiBX,EAAMW,IAAID,KAAO,GAC5C,IAAIE,EAAIC,EAAGC,KAAK5B,KAAKM,GAAK,IAAMN,KAAKU,UAArBV,MAAkDsB,EAAcC,EAAQE,GAAK,CAACI,EAAKC,EAAQC,KACvG,GAAc,IAAVD,EAAc,CACd,IAAIE,EAAYnB,EAASoB,cAAc,IAAI1B,EAAO2B,MAAMpB,EAAMS,MAAMC,KAAM,EAAGV,EAAMW,IAAID,KAAO,EAAG,IACjG,IAAIW,EAAO,CAAC5B,EAAO6B,SAASC,QAAQL,EAAWF,IAI/C,MAHc,IAAVC,GACAxB,EAAO+B,OAAOC,mBAAmB,wBAAwBR,GAEtDf,EAAQmB,E,CAGnB,OADA5B,EAAO+B,OAAOE,iBAAiB,uBAAuBT,GAC/Cf,EAAQ,KAAK,IAGxBhB,KAAKqB,EAAIK,EAAEe,MACX,IAAIC,EAAc,IAAIC,EAAOC,SAC7BF,EAAYG,KAAKhC,EAASiC,WAC1BJ,EAAYG,KAAK,MACjBH,EAAYK,KAAK/C,KAAKqB,EAAE,GAEhC,EAIJ,oCAEItB,cACIC,KAAKU,UAAY,IAAIZ,CACzB,CACAkD,+BAA+BnC,GAC3B,OAAOb,KAAKU,UAAUE,eAAeC,EAAUA,EAASoB,cAAc,IAAI1B,EAAO2B,MAAM,EAAG,EAAGe,OAAOC,UAAWD,OAAOC,YAC1H,CACAC,oCAAoCtC,EAA+BC,GAC/D,OAAOd,KAAKU,UAAUE,eAAeC,EAAUC,EACnD,E,UC7EJsC,EAAO1D,QAAU2D,QAAQ,S,SCAzBD,EAAO1D,QAAU2D,QAAQ,gB,SCAzBD,EAAO1D,QAAU2D,QAAQ,K,UCAzBD,EAAO1D,QAAU2D,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa/D,QAGrB,IAAI0D,EAASE,EAAyBE,GAAY,CAGjD9D,QAAS,CAAC,GAOX,OAHAiE,EAAoBH,GAAUJ,EAAQA,EAAO1D,QAAS6D,GAG/CH,EAAO1D,OACf,C,uGCpBA,eACA,SAGA,oBAAyBkE,GACxB,MAAMlD,EAAY,IAAI,EAAAmD,4BACtBD,EAAQE,cAAcjB,KAAKtC,EAAOwD,SAASC,gBAAgB,kBAAkB,UAK7EJ,EAAQE,cAAcjB,KAAKtC,EAAO0D,UAAUC,uCAAuC,EAAAtE,KAAMc,GAC1F,EAGA,wBAEA,C","sources":["webpack://punch/./src/formatter.ts","webpack://punch/external commonjs \"vscode\"","webpack://punch/external node-commonjs \"child_process\"","webpack://punch/external node-commonjs \"os\"","webpack://punch/external node-commonjs \"stream\"","webpack://punch/webpack/bootstrap","webpack://punch/./src/extension.ts"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nimport * as vscode from \"vscode\";\nimport * as cp from \"child_process\";\nimport * as stream from 'stream';\nimport * as os from \"os\";\nvar channel = 'punch-formatter';\nexport const MODE = { language: 'punch' };\n\nclass PunchFormatter {\n    public machine_os: any;\n    public py : any; \n    public formatter: any; \n    public w : any\n    constructor() {\n        this.machine_os = os.platform();\n        console.log(this.machine_os);\n        this.py = vscode.workspace.getConfiguration('punch-formatter')['pythonPath'];\n        if (this.py == '' && this.machine_os == 'win32') {\n            this.py = 'python ';\n        }\n        this.formatter = vscode.workspace.getConfiguration('punch-formatter')['formatterPath'];\n        if (this.formatter == '') {\n            this.formatter = '\"'+ __dirname + '/../formatter/formatter.py\"';\n        }\n    }\n\n    formatDocument(document: vscode.TextDocument, range :vscode.Range) {\n        return new Promise((resolve, reject) => {\n            this.format(document, range).then((res) => {\n                return resolve(res);\n            });\n\n        });\n    }\n\n    format(document: vscode.TextDocument, range : vscode.Range) {\n        this.w=null\n        return new Promise((resolve, reject) => {\n\n            let indentwidth = \" --indentWidth=\" + vscode.workspace.getConfiguration('punch-formatter')['indentwidth'];\n            let filename = ' -';\n            let start = \" --startLine=\" + (range.start.line + 1);\n            let end = \" --endLine=\" + (range.end.line + 1);\n            var p = cp.exec(this.py + \" \" + this.formatter + \" \" + filename + indentwidth + start + end, (err, stdout, stderr) => {\n                if (stdout != '') {\n                    let toreplace = document.validateRange(new vscode.Range(range.start.line, 0, range.end.line + 1, 0));\n                    var edit = [vscode.TextEdit.replace(toreplace, stdout)];\n                    if (stderr != '') {\n                        vscode.window.showWarningMessage('formatting warning:\\n'+stderr);\n                    }\n                    return resolve(edit);\n                }\n                vscode.window.showErrorMessage('formatting failed:\\n'+stderr);\n                return resolve(null);\n            });\n\n            this.w = p.stdin\n            var stdinStream = new stream.Readable();\n            stdinStream.push(document.getText());\n            stdinStream.push(null);\n            stdinStream.pipe(this.w)\n        });\n    }\n}\n\n\nexport class PunchDocumentRangeFormatter {\n    public formatter: any; \n    constructor() {\n        this.formatter = new PunchFormatter();\n    }\n    provideDocumentFormattingEdits(document : vscode.TextDocument) {\n        return this.formatter.formatDocument(document, document.validateRange(new vscode.Range(0, 0, Number.MAX_VALUE, Number.MAX_VALUE)));\n    }\n    provideDocumentRangeFormattingEdits(document: vscode.TextDocument, range :vscode.Range) {\n        return this.formatter.formatDocument(document, range);\n    }\n}","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport {PunchDocumentRangeFormatter, MODE} from './formatter';\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tconst formatter = new PunchDocumentRangeFormatter();\n\tcontext.subscriptions.push(vscode.commands.registerCommand('punch.Punchlet', () => {\n\t\t\t\t\n\t\t})\n\t);\n\n\tcontext.subscriptions.push(vscode.languages.registerDocumentFormattingEditProvider(MODE, formatter));\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n\n}\n"],"names":["Object","defineProperty","exports","value","MODE","language","PunchFormatter","constructor","this","machine_os","os","platform","console","log","py","vscode","workspace","getConfiguration","formatter","__dirname","formatDocument","document","range","Promise","resolve","reject","format","then","res","w","indentwidth","start","line","end","p","cp","exec","err","stdout","stderr","toreplace","validateRange","Range","edit","TextEdit","replace","window","showWarningMessage","showErrorMessage","stdin","stdinStream","stream","Readable","push","getText","pipe","provideDocumentFormattingEdits","Number","MAX_VALUE","provideDocumentRangeFormattingEdits","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","PunchDocumentRangeFormatter","subscriptions","commands","registerCommand","languages","registerDocumentFormattingEditProvider"],"sourceRoot":""}